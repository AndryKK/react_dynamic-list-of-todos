{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUserId","className","map","todo","cn","TodoList__item","completed","htmlFor","id","checked","type","readOnly","title","onClick","userId","BASE_URL","getTodos","fetch","then","response","json","getUser","UserId","CurrentUser","useState","user","setUser","useEffect","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"qTASaA,EAA4B,SAAC,GAGnC,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,aAEA,OACE,sBAAKC,UAAU,WAAf,UACE,wCAEA,qBAAKA,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGF,EAAMG,KAAI,SAAAC,GAAI,OACb,mCACE,qBAEEF,UAAWG,IAAG,CACZC,gBAAgB,EAChB,6BAA8BF,EAAKG,UACnC,0BAA2BH,EAAKG,YALpC,UAQE,wBAAOC,QAAO,UAAKJ,EAAKK,IAAxB,UACE,uBACEA,GAAE,UAAKL,EAAKK,IACZC,QAASN,EAAKG,UACdI,KAAK,WACLC,UAAQ,IAEV,4BAAKR,EAAKS,WAGZ,yBACEX,UAAU,iEAKVS,KAAK,SACLG,QAAS,WACPb,EAAaG,EAAKW,SARtB,sBAYGX,EAAKW,YA7BHX,EAAKK,iBCtBpBO,EAAW,qCAEV,SAASC,IACd,OAAOC,MAAM,GAAD,OAAIF,EAAJ,WACTG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,SAASC,EAAQC,GACtB,OAAOL,MAAM,GAAD,OAAIF,EAAJ,kBAAsBO,IAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,UCDlBG,EAA+B,SAAC,GAEtC,IADLT,EACI,EADJA,OAEA,EAAwBU,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAQA,OANAL,EAAQP,GAERa,qBAAU,WACRN,EAAQP,GAAQI,KAAKQ,KACpB,CAACZ,IAGF,qBAAKb,UAAU,cAAf,SACGwB,EACC,qCACE,oBAAIxB,UAAU,qBAAd,SACE,sDAEGa,OAGL,oBAAIb,UAAU,oBAAd,SAAmCwB,EAAKG,OACxC,mBAAG3B,UAAU,qBAAb,SAAmCwB,EAAKI,QACxC,mBAAG5B,UAAU,qBAAb,SAAmCwB,EAAKK,WAG1C,+CCOOC,EAlCO,WACpB,MAA4CP,mBAAS,GAArD,mBAAOQ,EAAP,KAAuBC,EAAvB,KACA,EAA0BT,mBAAS,IAAnC,mBAAOzB,EAAP,KAAcmC,EAAd,KAYA,OAVAlB,IAAWE,MAAK,SAAAiB,GACdD,EAASC,MAGXR,qBAAU,WACRX,IAAWE,MAAK,SAAAiB,GACdD,EAASC,QAEV,IAGD,sBAAKlC,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEF,MAAOA,EACPC,aAAciC,MAIlB,qBAAKhC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACG+B,EACC,cAAC,EAAD,CAAalB,OAAQkB,IACnB,2BC/BdI,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b6eb4836.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectUserId: (userId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUserId,\n}) => {\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <>\n              <li\n                key={todo.id}\n                className={cn({\n                  TodoList__item: true,\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    id={`${todo.id}`}\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{ todo.title }</p>\n                </label>\n\n                <button\n                  className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            </>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUser(UserId: number): Promise<User> {\n  return fetch(`${BASE_URL}/users/${UserId}`)\n    .then(response => response.json());\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  getUser(userId);\n\n  useEffect(() => {\n    getUser(userId).then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:&nbsp;\n              {userId}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </>\n      ) : (\n        <p>Loarding...</p>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState([]);\n\n  getTodos().then(todosFromServer => {\n    setTodos(todosFromServer);\n  });\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => {\n      setTodos(todosFromServer);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}