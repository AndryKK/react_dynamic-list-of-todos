{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUserId","useState","inputValue","setInputValue","selectValue","setSelectValue","filteredTodos","filter","title","includes","completed","className","id","value","onChange","event","target","handleSelectChange","type","handleInputChange","map","todo","cn","TodoList__item","htmlFor","checked","readOnly","onClick","userId","request","endpoint","fetch","then","response","json","CurrentUser","user","setUser","useEffect","UserId","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"iUAUaA,EAA4B,SAAC,GAGnC,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,aAEA,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,mBAAS,OAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAUIC,EAAwB,YAAIP,GAAOQ,QAAO,qBAAGC,MAAkBC,SAASP,MAQ5E,MANoB,cAAhBE,EACFE,EAAgBA,EAAcC,QAAO,mBAAiC,IAAjC,EAAGG,aACf,WAAhBN,IACTE,EAAgBA,EAAcC,QAAO,mBAAiC,IAAjC,EAAGG,cAIxC,sBAAKC,UAAU,WAAf,UACE,wCACA,yBACEA,UAAU,mBACVC,GAAG,SACHC,MAAOT,EACPU,SACE,SAACC,IApBkB,SAACA,GAC1BV,EAAeU,EAAMC,OAAOH,OAoBpBI,CAAmBF,IANzB,UAUE,wBAAQF,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,0BAEF,sBAAMF,UAAU,mBAAhB,0BACA,uBACEA,UAAU,mBACVO,KAAK,OACLL,MAAOX,EACPY,SACE,SAACC,IAvCiB,SAACA,GACzBZ,EAAcY,EAAMC,OAAOH,OAuCnBM,CAAkBJ,MAIxB,qBAAKJ,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGL,EAAcc,KAAI,SAAAC,GAAI,OACrB,mCACE,qBAEEV,UAAWW,IAAG,CACZC,gBAAgB,EAChB,6BAA8BF,EAAKX,UACnC,0BAA2BW,EAAKX,YALpC,UAQE,wBAAOc,QAAO,UAAKH,EAAKT,IAAxB,UACE,uBACEA,GAAE,UAAKS,EAAKT,IACZa,QAASJ,EAAKX,UACdQ,KAAK,WACLQ,UAAQ,IAEV,4BAAKL,EAAKb,WAGZ,yBACEG,UAAU,iEAKVO,KAAK,SACLS,QAAS,WACP3B,EAAaqB,EAAKO,SARtB,sBAYGP,EAAKO,YA7BHP,EAAKT,iBChE1B,SAASiB,EAAQC,GACf,OAAOC,MAAM,GAAD,OAHG,sCAGH,OAAeD,IACxBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,UCIlBC,EAA+B,SAAC,GAEtC,IADLP,EACI,EADJA,OAEA,EAAwB3B,mBAAsB,MAA9C,mBAAOmC,EAAP,KAAaC,EAAb,KAMA,OAJAC,qBAAU,WDFL,IAAiBC,KCGZX,EDFHC,EAAQ,UAAD,OAAWU,KCEPP,KAAKK,KACpB,CAACT,IAGF,qBAAKjB,UAAU,cAAf,SACGyB,EACC,qCACE,oBAAIzB,UAAU,qBAAd,SACE,sDAEGiB,OAGL,oBAAIjB,UAAU,oBAAd,SAAmCyB,EAAKI,OACxC,mBAAG7B,UAAU,qBAAb,SAAmCyB,EAAKK,QACxC,mBAAG9B,UAAU,qBAAb,SAAmCyB,EAAKM,WAG1C,8CCKOC,EA9BO,WACpB,MAA4C1C,mBAAS,GAArD,mBAAO2C,EAAP,KAAuBC,EAAvB,KACA,EAA0B5C,mBAAS,IAAnC,mBAAOF,EAAP,KAAc+C,EAAd,KAQA,OANAR,qBAAU,WFHHT,EAAQ,UEIFG,MAAK,SAAAe,GACdD,EAASC,QAEV,IAGD,sBAAKpC,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEZ,MAAOA,EACPC,aAAc6C,MAIlB,qBAAKlC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGiC,EACC,cAAC,EAAD,CAAahB,OAAQgB,IACnB,2BC3BdI,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a77fc925.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  todos: Todo[]\n  selectUserId: (userId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUserId,\n}) => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectValue, setSelectValue] = useState('all');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectValue(event.target.value);\n  };\n\n  let filteredTodos: Todo[] = [...todos].filter(({ title }) => title.includes(inputValue));\n\n  if (selectValue === 'completed') {\n    filteredTodos = filteredTodos.filter(({ completed }) => completed === true);\n  } else if (selectValue === 'active') {\n    filteredTodos = filteredTodos.filter(({ completed }) => completed === false);\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <select\n        className=\"TodoList__inputs\"\n        id=\"filter\"\n        value={selectValue}\n        onChange={\n          (event) => {\n            handleSelectChange(event);\n          }\n        }\n      >\n        <option value=\"all\">all</option>\n        <option value=\"active\">active</option>\n        <option value=\"completed\">completed</option>\n      </select>\n      <span className=\"TodoList__inputs\">Please Enter</span>\n      <input\n        className=\"TodoList__inputs\"\n        type=\"text\"\n        value={inputValue}\n        onChange={\n          (event) => {\n            handleInputChange(event);\n          }\n        }\n      />\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <>\n              <li\n                key={todo.id}\n                className={cn({\n                  TodoList__item: true,\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label htmlFor={`${todo.id}`}>\n                  <input\n                    id={`${todo.id}`}\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{ todo.title }</p>\n                </label>\n\n                <button\n                  className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            </>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api/';\n\nfunction request(endpoint: string) {\n  return fetch(`${BASE_URL}${endpoint}`)\n    .then(response => response.json());\n}\n\nexport function getTodos() {\n  return request('/todos');\n}\n\nexport function getUser(UserId: number): Promise<User> {\n  return request(`/users/${UserId}`);\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n};\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId).then(setUser);\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:&nbsp;\n              {userId}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => {\n      setTodos(todosFromServer);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}